/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __LOADER_SKEL_H__
#define __LOADER_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

#define BPF_SKEL_SUPPORTS_MAP_AUTO_ATTACH 1

struct loader {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *hellobpf;
	} progs;
	struct {
		struct bpf_link *hellobpf;
	} links;

#ifdef __cplusplus
	static inline struct loader *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct loader *open_and_load();
	static inline int load(struct loader *skel);
	static inline int attach(struct loader *skel);
	static inline void detach(struct loader *skel);
	static inline void destroy(struct loader *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
loader__destroy(struct loader *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
loader__create_skeleton(struct loader *obj);

static inline struct loader *
loader__open_opts(const struct bpf_object_open_opts *opts)
{
	struct loader *obj;
	int err;

	obj = (struct loader *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = loader__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	loader__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct loader *
loader__open(void)
{
	return loader__open_opts(NULL);
}

static inline int
loader__load(struct loader *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct loader *
loader__open_and_load(void)
{
	struct loader *obj;
	int err;

	obj = loader__open();
	if (!obj)
		return NULL;
	err = loader__load(obj);
	if (err) {
		loader__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
loader__attach(struct loader *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
loader__detach(struct loader *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *loader__elf_bytes(size_t *sz);

static inline int
loader__create_skeleton(struct loader *obj)
{
	struct bpf_object_skeleton *s;
	struct bpf_map_skeleton *map __attribute__((unused));
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "loader";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = 24;
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt,
			sizeof(*s->maps) > 24 ? sizeof(*s->maps) : 24);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	map = (struct bpf_map_skeleton *)((char *)s->maps + 0 * s->map_skel_sz);
	map->name = "loader.rodata";
	map->map = &obj->maps.rodata;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "hellobpf";
	s->progs[0].prog = &obj->progs.hellobpf;
	s->progs[0].link = &obj->links.hellobpf;

	s->data = loader__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *loader__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xc0\x01\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x09\0\
\x01\0\x79\x13\x10\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb4\x02\0\0\
\x13\0\0\0\x85\0\0\0\x06\0\0\0\xb4\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\
\0\x46\x69\x6c\x65\x6e\x61\x6d\x65\x20\x69\x73\x20\x25\x73\x20\x3a\x20\x0a\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x69\0\0\0\x04\0\xf1\xff\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\x01\0\x06\0\0\0\0\0\0\0\0\0\x13\0\0\0\0\0\
\0\0\0\0\0\0\x03\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x26\0\0\0\x12\0\x03\0\
\0\0\0\0\0\0\0\0\x38\0\0\0\0\0\0\0\x60\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x04\0\
\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x04\x05\x02\0\x2e\x74\x65\
\x78\x74\0\x68\x65\x6c\x6c\x6f\x62\x70\x66\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\
\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x68\x65\x6c\x6c\x6f\x62\
\x70\x66\0\x2e\x72\x65\x6c\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x73\x79\
\x73\x63\x61\x6c\x6c\x73\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x65\x78\
\x65\x63\x76\x65\0\x6c\x69\x63\x65\x6e\x73\x65\0\x5f\x6c\x69\x63\x65\x6e\x63\
\x65\0\x68\x65\x6c\x6c\x6f\x62\x70\x66\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\
\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x6f\x64\x61\x74\x61\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x74\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x33\x01\0\0\0\0\0\0\x8c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x33\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x38\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2f\0\0\0\x09\0\
\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x01\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\x08\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x58\0\0\0\x01\0\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x78\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\0\0\0\x01\0\0\0\x02\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x7c\0\0\0\0\0\0\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\
\0\0\0\0\x30\x01\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x7c\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\0\
\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\x01\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\
\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct loader *loader::open(const struct bpf_object_open_opts *opts) { return loader__open_opts(opts); }
struct loader *loader::open_and_load() { return loader__open_and_load(); }
int loader::load(struct loader *skel) { return loader__load(skel); }
int loader::attach(struct loader *skel) { return loader__attach(skel); }
void loader::detach(struct loader *skel) { loader__detach(skel); }
void loader::destroy(struct loader *skel) { loader__destroy(skel); }
const void *loader::elf_bytes(size_t *sz) { return loader__elf_bytes(sz); }
#endif /* __cplusplus */


#endif /* __LOADER_SKEL_H__ */
